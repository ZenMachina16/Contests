class neighborSum {
public:
    neighborSum(vector<vector<int>>& grid) {
        this->grid = grid;
        this->n = grid.size();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                positions[grid[i][j]] = {i, j};
            }
        }
    }
    
    int adjacentSum(int value) {
        if (positions.find(value) == positions.end()) {
            return 0;
        }

        auto [i, j] = positions[value];
        int sum = 0;

        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for (auto [di, dj] : directions) {
            int ni = i + di, nj = j + dj;
            if (ni >= 0 && ni < n && nj >= 0 && nj < n) {
                sum += grid[ni][nj];
            }
        }

        return sum;
    }
    
    int diagonalSum(int value) {
        if (positions.find(value) == positions.end()) {
            return 0;
        }

        auto [i, j] = positions[value];
        int sum = 0;

        vector<pair<int, int>> directions = {{-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        for (auto [di, dj] : directions) {
            int ni = i + di, nj = j + dj;
            if (ni >= 0 && ni < n && nj >= 0 && nj < n) {
                sum += grid[ni][nj];
            }
        }

        return sum;
    }

private:
    vector<vector<int>> grid;
    int n;
    unordered_map<int, pair<int, int>> positions;
};

